<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[源代码]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://wenhao.github.io//"/>
  <updated>2015-07-06T10:24:52.000Z</updated>
  <id>http://wenhao.github.io//</id>
  
  <author>
    <name><![CDATA[文浩]]></name>
    <email><![CDATA[wenhao@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[微服务利弊权衡]]></title>
    <link href="http://wenhao.github.io/2015/07/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%A9%E5%BC%8A%E6%9D%83%E8%A1%A1/"/>
    <id>http://wenhao.github.io/2015/07/06/微服务利弊权衡/</id>
    <published>2015-07-06T04:14:31.000Z</published>
    <updated>2015-07-06T10:24:52.000Z</updated>
    <content type="html"><![CDATA[<p>一些开发团队意识到<a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="external">微服务架构风格</a>是解决大型单体架构的首选方案。同时某些团队也发现微服务架构会降低生产效率。与其他架构一样，微服务也具有其利与弊。决定在特定场景之下使用微服务架构之前了解这些还是很有必要的。</p>
<h4 id="微服务的优点…">微服务的优点…</h4><ul>
<li><a href="./微服务利弊权衡.md/#高度的模块边界化">高度的模块边界化</a>：微服务促进系统模块化，特别是针对大型团队。</li>
<li><a href="./微服务利弊权衡.md/#独立部署">独立部署</a>：微服务更容易部署，而且由于微服务大多是独立自主的，当它出错的时候不大可能引起整个系统崩溃。</li>
<li><a href="./微服务利弊权衡.md/#技术架构多样性">技术架构多样性</a>：使用微服务你可以混用多种开发语言，开发框架和数据存储设备。</li>
</ul>
<h4 id="微服务缺点…">微服务缺点…</h4><ul>
<li><a href="./微服务利弊权衡.md/#分布式">分布式</a>：由于远程方法调用低效及出错风险极高，导致分布式系统很难开发。</li>
<li><a href="./微服务利弊权衡.md/#最终一致性">最终一致性</a>：比起开发分布式系统，保持系统之间的高度一致性更加困难，它意味着每个人都必须关注系统的最终一致性。</li>
<li><a href="./微服务利弊权衡.md/#运维复杂性">运维复杂性</a>：微服务经常更新并重新部署，所以你需要一个成熟的团队来管理这些微服务。</li>
</ul>
<a id="more"></a>
<p><a href="./微服务利弊权衡.md/#总结">总结</a></p>
<h3 id="高度的模块边界化">高度的模块边界化</h3><p>第一个优点是微服务使系统高度模块边界化。这是一个很重要的优点但同时也是很奇怪的一个，因为没有任何理由，理论上讲，为什么微服务应用对比大型单体应用要具有高度模块边界化特性。</p>
<p>我所说的高度模块边界化是什么意思呢？我想大部分人会赞同最好把软件分成不同的模块：应用程序之间相互耦合带来的复杂度。当你需要改变你系统的某一个部分使某个功能模块工作时，通常情况下，你只需要理解系统很小的一部分然后更改它，而且你能很容易就找到你需要更改的那一小部分。好的模块化结构在任何程序中都很有用，特别是在软件数量以指数级增长时更为重要。也许更为重要的是，应用程序随着团队开发越大越重要。</p>
<p>微服务的拥护者很快就提出<a href="http://www.thoughtworks.com/insights/blog/demystifying-conways-law" target="_blank" rel="external">Conway法则</a>，软件设计的架构，实际上反应了公司的组织与沟通架构。对于大型团队，特别是分布在不同地区的开发团队。比起大团队，小团队内部的沟通就没必要那么频繁而且更为正式，重新架构软件以适应这种组织结构就变得很重要了。微服务允许各个团队在某种沟通模式下维护自己相对独立的服务单元。</p>
<p>如我之前所说，没有任何理由为什么一个大型单体应用系统不应当具有一个好的模块式的架构。但是大多数人发现这种应用机构很少，因此<a href="https://en.wikipedia.org/wiki/Big_ball_of_mud" target="_blank" rel="external">“大泥球”</a>”任然是普遍使用的架构模型。这种普遍的痛点使得一部分团队转向微服务架构。模块之间解耦之所以可以工作是因为模块的边界减少了模块之间的引用。这样做是一个很有用的策略捷径帮助更快的构建产品功能，但是如果大范围使用却会破坏模块架构和减低团队的生产效率。把几个模块做成分开的服务使得之间的边界更加牢固，但是使它更难寻找痛点。</p>
<p>一种重要的方面是于持久层解耦。去数据中心化是微服务特征之一，它以为者每一个服务负责管理自己的数据库，其他服务必须通过此服务的公共API获取数据而不是直接访问数据库。这就避免了<a href="http://martinfowler.com/bliki/IntegrationDatabase.html" target="_blank" rel="external">数据库集成</a>，它是大型系统中耦合最主要的因数。</p>
<p>值得强调的是在大型单体应用中也可以创建坚固的模块边界，但是需要严格的纪律做支撑。同样微服务也可以开发成“大泥球”，但是它需要更多的工作量在做错误的事。以我之见，使用微服务增加了获取更好模块化架构的可能性。如果你对你们团队的纪律规则有信心，很可能获取那种优势，但是团队不断成长变大之后保持这种纪律规则就愈发困难，维护模块边界就变得更为重要。</p>
<p>如果你创建了错误的边界，这种优势就可能变成一种阻碍。这就是<a href="http://martinfowler.com/bliki/MonolithFirst.html" target="_blank" rel="external">先开发单体应用</a>策略的两个主要原因之一，也就是为什么那些更倾向于<a href="http://martinfowler.com/articles/dont-start-monolith.html" target="_blank" rel="external">提早做微服务</a>时必须先理解某个领域模型。</p>
<p>然而对于此的警告我还没没有说完。只有在系统维护一段时间之后你才能得出结论这个是否是好的模块化系统。同理，只有在我们使用微服务数年之后，我们才能知道微服务是否是引领更好的系统模块化的解决方案。此外，早使用早受益，</p>
<h3 id="分布式">分布式</h3><h3 id="最终一致性">最终一致性</h3><h3 id="独立部署">独立部署</h3><h3 id="运维复杂性">运维复杂性</h3><h3 id="技术架构多样性">技术架构多样性</h3><h3 id="次要因素">次要因素</h3><h3 id="总结">总结</h3><h4 id="脚注">脚注</h4><h4 id="延伸阅读">延伸阅读</h4><h4 id="鸣谢">鸣谢</h4>]]></content>
    <summary type="html">
    <![CDATA[<p>一些开发团队意识到<a href="http://martinfowler.com/articles/microservices.html">微服务架构风格</a>是解决大型单体架构的首选方案。同时某些团队也发现微服务架构会降低生产效率。与其他架构一样，微服务也具有其利与弊。决定在特定场景之下使用微服务架构之前了解这些还是很有必要的。</p>
<h4 id="微服务的优点…">微服务的优点…</h4><ul>
<li><a href="./微服务利弊权衡.md/#高度的模块边界化">高度的模块边界化</a>：微服务促进系统模块化，特别是针对大型团队。</li>
<li><a href="./微服务利弊权衡.md/#独立部署">独立部署</a>：微服务更容易部署，而且由于微服务大多是独立自主的，当它出错的时候不大可能引起整个系统崩溃。</li>
<li><a href="./微服务利弊权衡.md/#技术架构多样性">技术架构多样性</a>：使用微服务你可以混用多种开发语言，开发框架和数据存储设备。</li>
</ul>
<h4 id="微服务缺点…">微服务缺点…</h4><ul>
<li><a href="./微服务利弊权衡.md/#分布式">分布式</a>：由于远程方法调用低效及出错风险极高，导致分布式系统很难开发。</li>
<li><a href="./微服务利弊权衡.md/#最终一致性">最终一致性</a>：比起开发分布式系统，保持系统之间的高度一致性更加困难，它意味着每个人都必须关注系统的最终一致性。</li>
<li><a href="./微服务利弊权衡.md/#运维复杂性">运维复杂性</a>：微服务经常更新并重新部署，所以你需要一个成熟的团队来管理这些微服务。</li>
</ul>]]>
    
    </summary>
    
      <category term="Martin Fowler" scheme="http://wenhao.github.io/tags/Martin-Fowler/"/>
    
      <category term="微服务" scheme="http://wenhao.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="翻译" scheme="http://wenhao.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[互联网+]]></title>
    <link href="http://wenhao.github.io/2015/06/09/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    <id>http://wenhao.github.io/2015/06/09/互联网/</id>
    <published>2015-06-09T01:13:41.000Z</published>
    <updated>2015-07-06T04:29:53.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/互联网+.jpg" alt="互联网+"></p>
<p>&emsp;&emsp;眼下，互联网+持续升温，发展迅猛，加之政府大力扶持，中国经济开始进入技术、模式和产业大变革时期。在“站在这个风口上，猪都能飞起来了”的大背景之下，涌现出了一大批勇于创业积极创新的先进集体和个人。</p>
<h3 id="宏观政策">宏观政策</h3><p>&emsp;&emsp;当下，经济下行压力巨大，消费、投资和出口已不再是保持中国经济增长可靠的引擎。中国迫切的需要一个新的政策来拉动经济，促进消费及解决日益严峻的就业压力；加之地产行业的持续低迷，资产加速逃离，大量闲置资金急迫需要寻找下一个可靠的“资金池”以缓解经济运行压力。 “大众创业、万众创新”作为经济增长的双引擎之首写入政府工作报告， 以一种”抛开杂念，放手一搏“的精神激励着广大人民勇于创业积极创新的势头，可见政府抓重点调整产业结构的决心。互联网+恰好在各行各业起到了催化剂的作用，必将加速重塑传统行业的进程。</p>
<a id="more"></a>
<h3 id="趋势">趋势</h3><ul>
<li>连接需求方和供给方，去中心化。带来的是提高效率并充分利用资源，减少中间的分销流程，提供更为个性化的服务。例子：Uber、途家等。</li>
<li>传统行业互联网化，众多的细分行业都可以通过互联网获得发展机会。例如：B2C、C2C等。</li>
<li>对接互联网金融，一切的产业都需要金融的支持。例如：支付宝、陆金所P2P等。</li>
<li>智能时代，各种智能设备必将掀起新一轮的产业革命。例如：智能电视、智能家居、智能汽车、医疗健康、智能玩具、机器人等领域。</li>
</ul>
<h3 id="实践">实践</h3><h5 id="互联网+政府服务：">互联网+政府服务：</h5><p>&emsp;&emsp;资源整合，从基础设施服务(驾照违法查询、车辆年检预约、结婚登记预约、全程路况、水、电、煤气等)入手，对接政府各机构数据，打造一体化的城市服务平台。在不久的将来，也许不会再有类似“抄电表”之类的“土豪”工作，但是同样也会间接地衍生出很多需要特定专业技能的就业机会。</p>
<h5 id="互联网+传统农业：">互联网+传统农业：</h5><p>&emsp;&emsp;提高农村土地使用率，促进现代化农业进程，减少中间环节，细分市场，精准营销。例如：天天果园。</p>
<h5 id="互联网+教育：">互联网+教育：</h5><p>&emsp;&emsp;在线教育已不是什么新鲜的名词，而针对教育产业的“细分市场”提供更为”个性化“的授课体验也许会成为另一个朝阳产业。例如作业帮和学霸君等。</p>
<h5 id="互联网+医疗：">互联网+医疗：</h5><p>&emsp;&emsp;以往由于信息不对称导致药品价格虚高的现象将不复存在，药品电商会逐步取代传统的药品销售模式。各种可穿戴设备可以进一步提升医疗效率，避免医疗资源浪费。也许”医药代表“这一类”高大上“职业会慢慢退出历史的舞台。</p>
<p>更多……</p>
<h3 id="事件">事件</h3><ul>
<li>2014年8月29日，经国务院同意，发改委、工信部、科技部、公安部、财政部、国土部、住建部、交通部等八部委印发《关于促进智慧城市健康发展的指导意见》，要求各地区、各有关部门落实本指导意见提出的各项任务，确保智慧城市建设健康有序推进。</li>
<li>2014年9月10日，李克强提出，要在960万平方公里土地上掀起“大众创业”“草根创业”的新浪潮，形成“万众创新”“人人创新”的新态势。</li>
<li>2015年3月5日，在十二届全国人大三次会议上，李克强总理在政府工作报告中首次提出“互联网＋”行动计划。</li>
<li>2015年4月22日，蚂蚁金融服务集团、阿里巴巴集团与新浪微博，共同启动“互联网+城市服务”战略，联合为各地政府提供“智慧城市”的一站式解决方案。</li>
<li>2015年5月18日，暴风科技完成了第36个涨停，股价收报于248.6元，总市值达到298.32亿元，这接近迅雷市值（7.29亿美元）的6倍和优酷土豆38亿美元的市值。</li>
<li>2015年5月25日，四川省人民政府与腾讯公司在成都签署战略合作协议，就“互联网+”达成全面深层合作。</li>
</ul>
<h3 id="最后">最后</h3><p>&emsp;&emsp;以”互联网+痛点“为出发点可以衍生出很多新的创业创新的机会。产业和模式的创新需要依托技术的创新及支持，作为具备“创新”基因的TWers若能给站在“风口”上的创业者们提供专业的软件服务何尝不是另一种新的“互联网+软件服务”的革命呢?</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/互联网+.jpg" alt="互联网+"></p>
<p>&emsp;&emsp;眼下，互联网+持续升温，发展迅猛，加之政府大力扶持，中国经济开始进入技术、模式和产业大变革时期。在“站在这个风口上，猪都能飞起来了”的大背景之下，涌现出了一大批勇于创业积极创新的先进集体和个人。</p>
<h3 id="宏观政策">宏观政策</h3><p>&emsp;&emsp;当下，经济下行压力巨大，消费、投资和出口已不再是保持中国经济增长可靠的引擎。中国迫切的需要一个新的政策来拉动经济，促进消费及解决日益严峻的就业压力；加之地产行业的持续低迷，资产加速逃离，大量闲置资金急迫需要寻找下一个可靠的“资金池”以缓解经济运行压力。 “大众创业、万众创新”作为经济增长的双引擎之首写入政府工作报告， 以一种”抛开杂念，放手一搏“的精神激励着广大人民勇于创业积极创新的势头，可见政府抓重点调整产业结构的决心。互联网+恰好在各行各业起到了催化剂的作用，必将加速重塑传统行业的进程。</p>]]>
    
    </summary>
    
      <category term="互联网+" scheme="http://wenhao.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="互联网+" scheme="http://wenhao.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
</feed>