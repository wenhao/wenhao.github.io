<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[源代码]]></title>
  <subtitle><![CDATA[敏捷, 持续交付, 微服务, 重构, 大数据, Java]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wenhao.github.io//"/>
  <updated>2015-07-10T01:22:32.000Z</updated>
  <id>http://wenhao.github.io//</id>
  
  <author>
    <name><![CDATA[文浩]]></name>
    <email><![CDATA[wenhao@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[接口无益]]></title>
    <link href="http://wenhao.github.io/2015/07/09/%E6%8E%A5%E5%8F%A3%E6%97%A0%E7%9B%8A/"/>
    <id>http://wenhao.github.io/2015/07/09/接口无益/</id>
    <published>2015-07-09T09:36:47.000Z</published>
    <updated>2015-07-10T01:22:32.000Z</updated>
    <content type="html"><![CDATA[<p><strong>你认为接口怎么样？</strong></p>
<p><em>你的意识是Java或者C#的interface</em></p>
<p><strong>是的，接口是一个好的语言特性吗？</strong></p>
<p><em>当然，接口很好用！</em></p>
<p><strong>真的吗，呃。接口是什么？一个类吗？</strong></p>
<p><em>不是，和类不一样。</em></p>
<p><strong>怎么说？</strong></p>
<p><em>接口没有方法实现。</em></p>
<p><strong>这是一个接口吗？</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>这不是，这是一个抽象类。</em></p>
<a id="more"></a>
<p><strong>比起接口，有什么不同？</strong></p>
<p><em>好吧，抽象类可以有方法实现。</em></p>
<p><strong>对，但是这个没有，为什么它不是一个接口呢？</strong></p>
<p><em>好吧，一个抽象类可以包含非静态变量，而接口不能。</em></p>
<p><strong>对，但是这个也没有。再问，为什么它不是一个接口？</strong></p>
<p><em>因为它本来就不是。</em></p>
<p><strong>这不是一个令人满意的答案。如何区分它和接口呢？有什么是可以使用接口但是不能使用抽象类的呢？</strong></p>
<p><em>类可以继承其他类，但是不能同时实现你的这个抽象类。</em></p>
<p><strong>为什么不能？</strong></p>
<p><em>因为，在Java里，你不能同时继承多个类。</em></p>
<p><strong>为什么不能？</strong></p>
<p><em>因为Java编译器不允许你这样做。</em></p>
<p><strong>这太死板了。好吧，为什么不能实现那个抽象类而不是继承它呢？</strong></p>
<p><em>因为编译器只允许你实现一个抽象接口。</em></p>
<p><strong>这种规则太奇怪了。</strong></p>
<p><em>才不是，这很合情合理。编译器允许你实现多个接口但是只能让你继承一个类。</em></p>
<p><strong>为什么Java编译器允许你实现多个接口，但是不允许你继承多个类呢？</strong></p>
<p><em>因为类多重继承很危险。</em></p>
<p><strong>真的吗？怎么回事？</strong></p>
<p><em>因为多重继承会导致致命方块。</em></p>
<p><strong>天呐，听起来很可怕。什么是致命方块？</strong></p>
<p><em>当某个类继承其他两个类，这两个类就同时继承另外一个类。</em></p>
<p><strong>你的意思是：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D1</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D2</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">M</span> <span class="keyword">extends</span> <span class="title">D1</span>, <span class="title">D2</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><em>对，这很糟糕！</em></p>
<p><strong>为什么这很糟糕？</strong></p>
<p><em>因为类B可能有实例变量！</em></p>
<p><strong>你的意思像这样？</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;<span class="keyword">private</span> <span class="keyword">int</span> i;&#125;</span><br></pre></td></tr></table></figure>
<p><em>对呀！这样的话某个M的实例会有多少个i变量呢？</em></p>
<p><strong>嗯，我明白了。由于D1和D2都有i变量，又因为M继承与D1和D2，这种情况下你也许期盼着M有两个不同的i变量。</strong></p>
<p><em>对！但是由于M也间接继承与B，B只有一个i变量，你也许只期望M只包含一个i变量。</em></p>
<p><strong>嗯，这种继承关系有点模糊不清。</strong></p>
<p><em>对！</em></p>
<p><strong>因此Java和C#不能有多重继承是因为可能造成致命方块问题？</strong></p>
<p><em>不是的，因为每个人都可能造成致命方块问题由于所有的类都是继承与Object类的。</em></p>
<p><strong>嗯，明白了。编译器作者不会把Object特殊处理吗？</strong></p>
<p><em>呃…他们不会。</em></p>
<p><strong>我有点好奇为什么呢？有其他编译器作者解决这个问题吗？</strong></p>
<p><em>当然有，C++允许你创建致命方块问题。</em></p>
<p><strong>对，我想Eiffel也可以。</strong></p>
<p><em>对了，天呐，我想Ruby有解决方法。</em></p>
<p><strong>是的，使用CLOS(common-lisp object system)—好吧，我们说致命方块问题几十年前就解决了并且不是致命的，也没有导致更坏的结果。</strong></p>
<p><em>呃。对，我猜你是对的。</em></p>
<p><strong>让我们回到我原来的问题上。为什么这不是一个接口？</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>因为它使用的关键字是class；而且这门语言也不允许你做多重继承。</em></p>
<p><strong>对。所以关键字interface的发明是为了避免多重继承。</strong></p>
<p><em>是的，可能是事实。</em></p>
<p><strong>为什么Java或者C#的作者不适用已知的解决方案解决多重继承呢？</strong></p>
<p><em>我不知道。</em></p>
<p><strong>我也不知道，但是我可以猜。</strong></p>
<p><em>你猜到了什么？</em></p>
<p><strong>懒惰。</strong></p>
<p><em>什么，懒惰？</em></p>
<p><strong>对，它们根本不想处理这个问题。因此创建了一个新的东西绕过这个问题。这个东西就是interface。</strong></p>
<p><em>你是说Java的作者创建interface是为了避免一些额外的工作量？</em></p>
<p><strong>除此之外，我不能解释这个问题。</strong></p>
<p><em>这有点太过鲁莽。我确信他们的意图肯定不只是这个。不管怎么样，有interface不会是什么坏事吧？我的意思是，它应该也没什么坏处吧？</em></p>
<p><strong>尝试问你自己这个问题：为什么某个类需要知道它实现某个接口？这种东西是不是应该隐藏起来呢？</strong></p>
<p><em>你的意思某个派生类应该知道这个并判断使用正确的关键字，extends或者implements，对吗？</em></p>
<p><strong>对！如果你把class改成接口，有多少派生类需要同时修改？</strong></p>
<p><em>都得改，至少在Java里面来说。在C#倒是解决了这个问题。</em></p>
<p><strong>确实是这样。关键字implements和extends确实是多余而且危险的。Java还不如C#和C++使用冒号。</strong></p>
<p><em>好，好吧，但是究竟什么时候需要使用多重继承呢？</em></p>
<p><strong>下列情况我会用：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o : observers)</span><br><span class="line">            o.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObservableWidget</span> <span class="keyword">extends</span> <span class="title">MyWidget</span>, <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>哦，这是观察者模式！</em></p>
<p><strong>是的，这是观察者模式——完全正确。</strong></p>
<p><em>但是你不能编译因为你不能继承多个类。</em></p>
<p><strong>对，这就很悲剧。</strong></p>
<p><em>悲剧？但是为什么这样说呢？我的意思是你可以让MyWidget继承Subject类！</em></p>
<p><strong>但是我并不想MyWidget知道任何关于观察者的信息。我想保持其关注点分离。观察者与小部件的关注点分离。</strong></p>
<p><em>之后只需要在MyObservableWidget类实现register和notify方法。</em></p>
<p><strong>什么？在每个观察者里面重复这些代码？我不认同这种做法。</strong></p>
<p><em>在MyObservableWidget里持有Subject的引用把功能代理给Subject。</em></p>
<p><strong>什么？在每个观察者里面重复这些代理代码？如此愚蠢。如此拙劣。呸。</strong></p>
<p><em>好吧，你不得不在一个或多个观察者做这事。</em></p>
<p><strong>我知道。但是我讨厌这样做。</strong></p>
<p><em>呃，似乎也没办法避免。要么你违反关注点分离原则，要么重复部分代码。</em></p>
<p><strong>是的。这种情况下语言强迫我不得不这样做。</strong></p>
<p><em>是的，很不幸。</em></p>
<p><strong>到底是语言的什么特性导致这种糟糕的局面呢？</strong></p>
<p><em>关键字interface。</em></p>
<p><strong>所以说…?</strong></p>
<p><em>关键字interface没什么好处，接口无益。</em></p>
<hr>
<p>翻译自<a href="http://blog.cleancoder.com/uncle-bob/2015/01/08/InterfaceConsideredHarmful.html" target="_blank" rel="external">‘Interface’ Considered Harmful</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>你认为接口怎么样？</strong></p>
<p><em>你的意识是Java或者C#的interface</em></p>
<p><strong>是的，接口是一个好的语言特性吗？</strong></p>
<p><em>当然，接口很好用！</em></p>
<p><strong>真的吗，呃。接口是什么？一个类吗？</strong></p>
<p><em>不是，和类不一样。</em></p>
<p><strong>怎么说？</strong></p>
<p><em>接口没有方法实现。</em></p>
<p><strong>这是一个接口吗？</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>这不是，这是一个抽象类。</em></p>]]>
    
    </summary>
    
      <category term="Robert C. Martin" scheme="http://wenhao.github.io/tags/Robert-C-Martin/"/>
    
      <category term="翻译" scheme="http://wenhao.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://wenhao.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小小单例模式]]></title>
    <link href="http://wenhao.github.io/2015/07/07/%E5%B0%8F%E5%B0%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wenhao.github.io/2015/07/07/小小单例模式/</id>
    <published>2015-07-07T13:40:29.000Z</published>
    <updated>2015-07-09T05:50:49.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/singleton-pattern.png" alt="单例模式"></p>
<p><strong>你熟悉这段代码吗：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> X instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">X</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> X <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">      instance = <span class="keyword">new</span> X();</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// more methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>当然。这是GOF这本书里面提到的单例模式。但是我总是听到别人说我们不应该使用它。</em></p>
<p><strong>为什么我们不应该使用它？</strong></p>
<p><em>因为它使得我们的系统难以测试</em></p>
<p><strong>真的吗？为什么会那样呢？</strong></p>
<p><em>因为你不能模拟(mock)一个单例对象。</em></p>
<p><strong>不能吗？为什么不能？</strong></p>
<p><em>这样说吧，因为唯一能够访问私有变量的类只有单例对象自身，不暴露给外部就没办法模拟(mock)。</em></p>
<a id="more"></a>
<p><strong>你知道封装和测试的规则吗？</strong></p>
<p><em>嗯，不知道。规则是什么呢？</em></p>
<p><strong>测试胜过封装。</strong></p>
<p><em>这是什么意思呢？</em></p>
<p><strong>意思就是测试赢了封装。只是为了维持封装性的话，没有测试会被限制访问某个变量。</strong></p>
<p><em>你的意思是如果测试需要访问私有变量…</em></p>
<p><strong>…变量不应该是私有的。对。</strong></p>
<p><em>听起来好像不对。我的意思是，封装，呃，很重要！</em></p>
<p><strong>测试更为重要。</strong></p>
<p><em>等等。什么？</em></p>
<p><strong>如果代码不能够被测试，封装性好的代码又有什么好的呢？</strong></p>
<p><em>好，好吧，但是如果我们不得不测试单例对象呢。</em></p>
<p><strong>看如下代码。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> X instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">X</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> X <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">      instance = <span class="keyword">new</span> X();</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// methods.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestX</span> </span>&#123;</span><br><span class="line">  <span class="annotation">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    X.instance = <span class="keyword">new</span> XMock();   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMock</span> <span class="keyword">extends</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overide methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>哦，你把实例变量变成“包”范围。</em></p>
<p><strong>对。</strong></p>
<p><em>这样的话你就可以模拟单例对象了。</em></p>
<p><strong>对。考虑一下代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> X instance = <span class="keyword">new</span> X();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">X</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// methods.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>等等！实例方法哪去了？</em></p>
<p><strong>我不需要实例方法。</strong></p>
<p><em>哦，这个实例变量是公共的。你可以直接使用它。</em></p>
<p><strong>对。</strong></p>
<p><em>但是…但是…其他人可能重写它？</em></p>
<p><strong>谁会做那事？</strong></p>
<p><em>我不知道。呃，某些坏人吧。</em></p>
<p><strong>你们团队有这种坏人吗？</strong></p>
<p><em>没有。但是。只是感觉这样做不太安全。</em></p>
<p><strong>这样，如果它是公共API的一部分，我同意你的观点。但是如果这段代码只会被我们项目用到那就另当别论了…</strong></p>
<p><em>我们应该信任我们团队成员？</em></p>
<p><strong>当然。</strong></p>
<p><em>这样更容易模拟(mock)，对吗？</em></p>
<p><strong>当然。</strong></p>
<p><em>如此的话我猜我们应用使用单例模式如果我们想用的话。</em></p>
<p><strong>当然。经管大多数情况下我不想。</strong></p>
<p><em>这一番讨论之后，你现在却想告诉我你不想使用单例模式？</em></p>
<p><strong>是这样，我想理解为什么不适用它更为重要。</strong></p>
<p><em>好吧，为什么你不适用单例模式？</em></p>
<p><strong>我有时候也用。特别是在做公共APIs的时候。</strong></p>
<p><em>你的意思是又是信任的问题？</em></p>
<p><strong>对。在公共API中如果我想确保只有一个实例被创建时，我就会使用单例模式。</strong></p>
<p><em>好吧，但是如果不是在做公共API的时候，但是你任然想只创建一个实例呢？</em></p>
<p><strong>这样的话，我就直接的创建一个。</strong></p>
<hr>
<p>翻译自<a href="http://blog.cleancoder.com/uncle-bob/2015/07/01/TheLittleSingleton.html" target="_blank" rel="external">The Little Singleton</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/singleton-pattern.png" alt="单例模式"></p>
<p><strong>你熟悉这段代码吗：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> X instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">X</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> X <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">      instance = <span class="keyword">new</span> X();</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// more methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>当然。这是GOF这本书里面提到的单例模式。但是我总是听到别人说我们不应该使用它。</em></p>
<p><strong>为什么我们不应该使用它？</strong></p>
<p><em>因为它使得我们的系统难以测试</em></p>
<p><strong>真的吗？为什么会那样呢？</strong></p>
<p><em>因为你不能模拟(mock)一个单例对象。</em></p>
<p><strong>不能吗？为什么不能？</strong></p>
<p><em>这样说吧，因为唯一能够访问私有变量的类只有单例对象自身，不暴露给外部就没办法模拟(mock)。</em></p>]]>
    
    </summary>
    
      <category term="Robert C. Martin" scheme="http://wenhao.github.io/tags/Robert-C-Martin/"/>
    
      <category term="设计模式" scheme="http://wenhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://wenhao.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微服务利弊权衡]]></title>
    <link href="http://wenhao.github.io/2015/07/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%A9%E5%BC%8A%E6%9D%83%E8%A1%A1/"/>
    <id>http://wenhao.github.io/2015/07/06/微服务利弊权衡/</id>
    <published>2015-07-06T04:14:31.000Z</published>
    <updated>2015-07-14T09:58:33.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/microservice.png" alt="微服务架构"></p>
<p>现在许多开发团队已经意识到<a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="external">微服务架构模式</a>会是解决大型单体应用架构所带来的问题的首选解决方案，但是某些团队也反应微服务架构会在某种程度上降低整个开发团队的开发效率。与任何其他架构模式一样，微服务架构也有其利弊之处，结合你特定的应用场景理解这些利弊之处能帮助你做出更明智的选择。</p>
<h4 id="微服务提供的好处…">微服务提供的好处…</h4><ul>
<li><a href="./#高度的模块边界化">高度的模块边界化</a>：微服务促进系统模块化，对大型团队尤其重要。</li>
<li><a href="./#独立部署">独立部署</a>：简单的服务部署更为容易因为它的依赖更少，并且服务是相对独立自主的，而且当某个服务出错时不太可能引起整个应用程序系统崩溃。</li>
<li><a href="./#技术多样性">技术多样性</a>：使用微服务你可以混用多种开发语言，开发框架和数据存储技术。</li>
</ul>
<h4 id="微服务引入的成本…">微服务引入的成本…</h4><ul>
<li><a href="./#分布式">分布式</a>：分布式系统开发难度大，因为远程调用速度慢且出错风险极高。</li>
<li><a href="./#最终一致性">最终一致性</a>：在分布式系统中管理强一致性问题更加困难，这意味着每个服务都必须关注系统的最终一致性问题。</li>
<li><a href="./#运维复杂性">运维复杂性</a>：你需要一个较为成熟的维护团队来管理诸多的微服务，处理日常的微服务更新及频繁部署等问题。</li>
</ul>
<a id="more"></a>
<p><a href="./#总结">总结</a></p>
<h3 id="高度的模块边界化">高度的模块边界化</h3><p>第一个好处是微服务高度的模块边界化低耦合。这是一个重要的好处同时这本身也是一个很奇怪的论断，为什么微服务就应该有高度的模块边界化特性，而单体应用不能有此特性呢，理论上讲没有任何理由这样说。</p>
<p>此处我说的高度的模块边界化是什么意思呢？软件内部某些部分相互依赖高度耦合，好的解决方法是把它们解耦分成不同模块，我相信大家都会认同这种做法。你希望你分解的模块可以在你需要修改系统的某一部分时，只需要理解系统很小的一部分就可以更改，而且要能够很容易就能定位到需要修改的地方。在任何程序中，好的模块化模型都是非常有用的，而且随着软件系统的复杂度渐增其重要程度可能成指数级放大，更为重要的是当开发团队持续壮大的时候。</p>
<p>微服务的提倡者很快就提出了<a href="http://www.thoughtworks.com/insights/blog/demystifying-conways-law" target="_blank" rel="external">康韦法则</a>，这个概念的意思是软件设计的架构，实际上反应了公司的组织与沟通架构。对于大型团队，尤其是团队分布在不同的地区时，在决定系统架构时，要考虑到小团队内部的沟通会比在大团队内的沟通更为高效。微服务允许各个团队在这种高效的沟通模式下维护自己相对独立的服务单元。</p>
<p>正如我之前提到的，单体应用为什么不应该有模块化特性呢，这说不通，找不到任何理由。但是据大部分人有多年的经验来说，高度模块化的单体应用不过九牛一毛，因为大部分程序任然使用的是<a href="https://en.wikipedia.org/wiki/Big_ball_of_mud" target="_blank" rel="external">“大泥球”</a>这种架构模式。正式由于大部分单体应用最终都会存在这个问题，一些团队开始转向使用微服务架构。模块化之所以可以解耦是因为模块的边界化特性会阻碍模块之间的相互引用，但麻烦的是，对于单体应用系统，通常情况下会绕过这些阻碍。这样做可以帮助开发团队快速交付新功能，是一个高效可行的策略，但是如果大范围使用反而会破坏已有的模块化架构并降低开发团队的工作效率。把模块做成独立分开的微服务会使这种边界化优势更加显著，让那些问题更难出现。</p>
<p>一种重要的方面是于持久层解耦。去数据中心化是微服务特征之一，它以为者每一个服务负责管理自己的数据库，其他服务必须通过此服务的公共API获取数据而不是直接访问数据库。这就避免了<a href="http://martinfowler.com/bliki/IntegrationDatabase.html" target="_blank" rel="external">数据库集成</a>，它是大型系统中耦合最主要的因数。</p>
<p>值得强调的是在大型单体应用中也可以创建坚固的模块边界，但是需要严格的纪律做支撑。同样微服务也可以开发成“大泥球”，但是它需要更多的工作量在做错误的事。以我之见，使用微服务增加了获取更好模块化架构的可能性。如果你对你们团队的纪律规则有信心，很可能获取那种优势，但是团队不断成长变大之后保持这种纪律规则就愈发困难，维护模块边界就变得更为重要。</p>
<p>如果你创建了错误的边界，这种优势就可能变成一种阻碍。这就是<a href="http://martinfowler.com/bliki/MonolithFirst.html" target="_blank" rel="external">先开发单体应用</a>策略的两个主要原因之一，也就是为什么那些更倾向于<a href="http://martinfowler.com/articles/dont-start-monolith.html" target="_blank" rel="external">提早做微服务</a>时必须先理解某个领域模型。</p>
<p>然而对于此的警告我还没没有说完。只有在系统维护一段时间之后你才能得出结论这个是否是好的模块化系统。同理，只有在我们使用微服务数年之后，我们才能知道微服务是否是引领更好的系统模块化的解决方案。此外，更早的采用此架构就更加明智，因此，在一般团队开发的微服务之后，收益模块化的优势往往有些延迟。即使那样，我们不得不接受一般团队开发的一般软件，不是与优秀的团队比较结果而是我们不得不与使用单体应用架构开发的软件做比较——这是一种微妙的对照评估。</p>
<p>我将要说的都是别人早期实践过这种架构风格的一些真实问题，他们的判断是越早维护他们的模块越有意义。</p>
<p>有个案例研究特别有趣。某个团队做了错误的选择了使用微服务架构，但是根据文章<a href="http://martinfowler.com/bliki/MicroservicePremium.html" target="_blank" rel="external">微服务代价</a>来说他们的系统还不够复杂。这个项目出现了问题必须挽救，所以大部分人又加入了此项目。这种情况下，微服务架构可以帮上忙，因为比起单体系统来说微服务可以更容易消化大部分开发人员而且可以把大团队平均分配到各个团队。最终，这个团队效率高于开发单体应用，使团队能够追赶进度。但是任然有负面的影响，比起开发单体应用来说，微服务会花费更多的时间开发同样的功能，但是微服务架构在后期也可以提高效率。</p>
<h3 id="分布式">分布式</h3><p>微服务使用分布式系统来提高模块化。但是分布式系统有个很大的缺点，这个缺点正式“分布式的”。一旦你选择了分布式架构，你就会面临太多的复杂性问题。<a href="http://martinfowler.com/articles/distributed-objects-microservices.html" target="_blank" rel="external">我不认为微服务社区会天真的以为分布式对象会带来额外的成本</a>，但是这种复杂度任然存在。</p>
<p>第一个问题是性能。你不得不正视功能之间调用的性能最近成为了热点问题，但是远程调用速度很慢。如果你的服务调用多个远程服务，而且每一个服务又调用其他服务，所有的响应时间加起来会变成可怕的潜在隐患。</p>
<p>当然你可以通过某种方式缓解这个问题。首先你可以增加被调用服务的粒度，你可以只做一些服务。这会使编程模型变得复杂，你不得不考虑批量处理服务之间的调用。这种方法只能达到这种地步，因为一次性你不得不调用所有的关联服务。</p>
<p>第二种缓解方式是使用异步。如果并行调用六个异步方法，你最慢的速度决定于这六个异步调用中最慢的那个而不是六个异步调用时间总和。这种方式可以获得很大的性能改进，但是同时也会导致另外一个我们所知的问题。异步编程很难：难于实现，也难于调试。但是我听说过的大部分微服务案例表明做异步只是为了达到可以接受的性能指标。</p>
<p>性能之后是可靠性。你期待正在执行的功能调用能够工作，但是远程方法调用任何时候都可能失败。如果有大量的微服务的话，失败的几率就更大。聪敏的开发人员早就意识到这一点并及早做<a href="http://martinfowler.com/articles/microservices.html#DesignForFailure" target="_blank" rel="external">故障设计</a>。庆幸的是异步调用的策略也同样可以提高故障处理的弹性。但是这并起不了太大作用，你任然需要做其他的工作来找出具体是哪一个远程调用失败了。</p>
<p>这只是<a href="http://www.infoq.com/cn/news/2009/06/fallacies-distributed-computing" target="_blank" rel="external">分布式计算的谬误</a>提到的前两点。</p>
<p>对于这个问题有一些说明。首先，大部分问题都是随着单体应用不断扩大而导致。某些单体应用都是相对独立的，通常情况下，大部分工作在遗留系统之上。通过网络远程的方式与这些系统交互同样会遇到这些问题。这就是为什么大多数人倾向于更早的使用微服务架构来处理各网络服务之间的信息交付。这种时候经验就很有帮助了，一个有此经验的团队就能更好的解决这些分布式的问题。</p>
<p>但是分布式始终会是个成本问题。每次谈论分布式问题我都有点勉强，因为大多数人在使用分布式机构之前低估了它带来的问题。</p>
<h3 id="最终一致性">最终一致性</h3><p>我确认你也会认同访问网站需要一些耐心。你更新某些东西，如果你重新加载页面，想要更新的数据就丢失了。也许等几分钟之后，再次重新加载页面，更新的内容又出现了。</p>
<p>这种实用性很差的问题令人讨厌，这就是关系到最终一致性问题。你的更新操作可能被粉色节点处理，但是你的请求可能被绿色节点处理。直到绿色节点从粉色节点获取更新的结果，你陷入了不一致的情况。最总内容会达成一致，但是在这个过程中你会好奇是不是什么地方出了问题。</p>
<p>微服务由于具有其去数据中心化的特点，使用它就会造成最终一致性问题。对于单体应用来说，你可以在一个事务期间做多件事。而微服务需要更新多个不同的资源，分布式事务是很讨厌的(合理)。开发人员需要重视一致性问题，为了避免后悔，在做任何编码之间，试图搞清楚如何找出哪些过程是不同步的。</p>
<p>单体应用同样具有这些问题。在系统不断变大后，需要更多的做缓存来提高性能，但是缓存失效又是<a href="http://martinfowler.com/bliki/TwoHardThings.html" target="_blank" rel="external">另外一个问题</a>。大多数应用程序都需要<a href="http://martinfowler.com/eaaCatalog/optimisticOfflineLock.html" target="_blank" rel="external">离线锁</a>以避免长时间存在的数据库事务。外部系统需要更新但是又不能拥有事务处理。业务流程的不一致性问题没有你想的那么严重，因为业务通常考虑到了这点(业务流程本身就先理解分布式系统<a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem/" target="_blank" rel="external">CAP原理</a>)。</p>
<p>如其他分布式系统问题一样，单体应用也没办法完全避免不一致的问题，但是这种问题要少得多，尤其是单体应用够小的话。</p>
<h3 id="独立部署">独立部署</h3><p>模块边界话和分布式系统的权衡困扰了我整个职业生涯。但是有一件事明显改变，在过去十年里，存在专门负责发布到产品环境的职位。在二十世纪，产品环境发布任然是偶尔而且最痛苦的过程，通常白天黑夜两班倒只是为了把软件放到某个地方可以工作。但是如今，成熟的团队可以频繁的部署的产品环境，许多组织开始实践<a href="http://martinfowler.com/bliki/ContinuousDelivery.html" target="_blank" rel="external">持续交付</a>，使得他们可以一天多次发布到产品环境。</p>
<p>这种改变对整个环境产业具有重大的意义，同样它也深远的影响着微服务。引入微服务就是为了解决部署大型单体应用的复杂度，即便是修改单体应用很小的一部分也可能导致整个部署失败。微服务的一个主要原则就是<a href="http://martinfowler.com/articles/microservices.html#ComponentizationViaServices" target="_blank" rel="external">服务即组件</a>，它们可以独立的部署。也就是说当你修改某个服务时，你只需要测试然后部署这个服务就够了。即便你搞砸了这个服务，也不会使整个系统崩溃。毕竟，由于需要故障设计，即使你的某个组件完全失败掉也不应当使系统的其他部分停止工作。</p>
<p>这是一种双向选择的关系。由于大部分微服务需要频繁的部署，所以你也许要同时兼顾部署。这就是为什么快速应用部署和快速基础设施创建是<a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html" target="_blank" rel="external">微服务的前提</a>。比起这些基础的要求只要，你需要的是做持续交付。</p>
<p>持续交付最大的好处就是减少从想法到产品环境可运行的软件的周期时间。公司组织能够快速反应市场变化，比起他们的竞争对手开发新功能更加快速。</p>
<p>因为使用微服务所以大部分人开始使用持续交付，有必要提一下甚至大型单体应用也可以做持续交付。Facebook和Etsy就是两个最好的例子。也有很多尝试独立部署微服务失败的例子，多个微服务之间需要协调依次发布。但是我也听不少人说微服务做持续交付更为简单，但是我并不是很相信这跟模块化有太多的关系——尽管模块化确实与交付速度直接相关。</p>
<h3 id="运维复杂性">运维复杂性</h3><p>能够快速的部署独立的单元是件好事，但是同时也带来额外的维护难题，半打的应用程序可能变成了上百的微服务，很多公司组织很难找到合适的工具可以处理这种问题。</p>
<p>持续交付的角色就更加突出。对于单体应用来说持续交付是个很有价值的技术，值得尝试去使用它，它也逐渐变成微服务必备的技能。如果在没有自动化和持续交付的能力的话是没有办法处理那么多的服务的。维护复杂性就会随着管理和监控需求的增加而变大。如果微服务同时存在于单体应用程序之中的话，持续交付的成熟度模型就变得有用了。</p>
<p>微服务支持者认为由于每一个微服务都足够小，所以很容易理解。但是危险的是这并不能避免复杂度，它仅仅在不同服务之间转移而已。这就表现为增加运维复杂性，例如在服务之间调试非常困难。好的服务边界可以缓解这个问题，但是错误的服务边界就会使问题变得更糟。</p>
<p>处理这种维护复杂性需要许多新的技能和工具——技能更为重要。现有的工具还不成熟，而且我的本能告诉我即便有好的工具，技能的缺失在微服务的环境里还是起不了多大作用。</p>
<p>然而更好的技能和工具并不是处理微服务带来的维护复杂性最难解决的事情。为了办到这一切你需要引入devops文化：让开发人员，维护人员或者团队中的任何人员加入软件的交付过程。如果你不提高技能和改变文化，你的单体应用可能只是进行缓慢，但是你的微服务蒋会遭受创伤止步不前。</p>
<h3 id="技术架构多样性">技术架构多样性</h3><p>由于每一个微服务都是独立的可部署单元，你可以为你的服务选择任意合适的技术栈。微服务可以使用不同的语言，不同的框架甚至不同数据存储介质。允许团队选择合适的工具，针对不同的问题选择合适的语言或框架。</p>
<p>技术多向性的讨论集中体现为具体的事情找合适的工具，但是通常微服务最大的好处是版本控制更为乏味的问题。在单体应用中一个库字需要一个版本，通常导致升级问题。系统的一部可鞥需要升级某部分新功能但是同时可能破坏系统其他部分已有的功能。处理库版本控制的问题会随着代码库的变大而成指数级放大。</p>
<p>技术多样性是很危险的，它会使开发团队感到恐慌。我知道的大多数开发团队仅推荐使用一小部分核心的技术。这是由于大部分工具比如监控工具限制了你可以需用的技术。</p>
<p>不要低估实验的价值。对于单体应用系统，早期敲定的语言和框架很难改动。十年之后这些决定可能让团队困在这些拙劣的技术之内无法自拔。微服务允许团队尝试新的工具，并且每次迁移一个服务也算是比较先进的技术了。</p>
<h3 id="次要因素">次要因素</h3><p>上面列出的只是我能想到的一些主要的利与弊。下面也有些我认为不是很重要的因数。</p>
<p>微服务支持者常说微服务更容易做伸缩性扩展，你可以为你的微服务分配任意需要的负载，而单体应用就不行了。然而这让我想起了过去的经历，实际上有选择性的性能缩放比使用千篇一律的缩放要好得多。</p>
<p>微服务允许你分离一些敏感信息并且还可以在此之上加更多的安全保护。甚至你可以加强微服务之间的安全通信，这样就更难攻破。由于安全问题日益重要，考虑到这一点迁移到微服务是不二之选。即使不这样做，大部分单体应用系统也会创建分离的服务来处理一下敏感信息。</p>
<p>微服务的批判者认为比起单体应用微服务更难于测试。确实很难测试，算是分布式系统复杂性之一——这里介绍一些<a href="http://martinfowler.com/articles/microservice-testing/" target="_blank" rel="external">测试微服务的好方法</a>。对于测试单体应用和微服务的区别来说，更重要的是有自律性的去严肃对待测试。</p>
<h3 id="总结">总结</h3><p>关于任何架构风格的任何文章都有其局限性，正如我在文章<a href="http://martinfowler.com/bliki/LimitationsOfGeneralAdvice.html" target="_blank" rel="external">建议的局限性</a>所述。所以读此文章并不能帮助你做任何决定，但是这种文章能够启发你在决定是多考虑一些在文章里提到的因数。每一个提到的优缺点对不同的系统可能有不同的作用，有时候甚至优缺点颠倒(高度的模块边界化可能对复杂的大系统有用，但是对一般的小系统则有害无益)，做任何决定都应该基于特定的应用场景。考量哪一个因素才是对你的系统影响最大。此外，我们对微服务架构的经验也相对较少。你只有在系统趋于成熟的时候才能评判架构的正确性，只有在系统开发数年之后才会知道什么样的架构才有用。关于微服务架构，我们还没有多少实际的例子。</p>
<p>单体应用和微服务并不是一个简单的二元选择。它们都是相对比较模糊的概念，这就意味着大部分系统都会处于某个模糊的领域边界内。也有些系统都不属于这两种类型。大部分人，也包括我在内，在讨论微服务时总是拿单体应用作对比，因为对比更为普遍使用的系统更为有意义，但我们必须记住有一些系统式不属于我们提到的这两种类型的。我想单体应用和微服务算是软件架构中最主要的两种。它们都值得被提起，因为它们的有趣特点是很值得讨论的，但是并没有架构师严格的区分它们。</p>
<p>尽管这么说，一个概括性总结<a href="http://martinfowler.com/bliki/MicroservicePremium.html" target="_blank" rel="external">微服务代价</a>算是被大家广泛接受：微服务会增加复杂的大系统的生产效率。如果你可以控制单体应用系统的复杂度，你就不应当使用微服务。</p>
<p>但是这些关于微服务的言论并不应该让我们忘记什么才是印象软件项目成功与失败重要的因素。一些软性的因素诸如团队中的人员水平，人员之间的沟通效率，与领域专家的高效沟通，都会对项目有影响，并不决定你是否使用微服务。从技术的角度来说，更多的关注一些诸如整洁代码，好的测试和架构的演进。</p>
<h5 id="脚注">脚注</h5><ol>
<li><p>一些人认为“单体应用”是一个贬义词，意味着缺乏模块化结构设计的系统。在微服务的领域里大部分人不会这样做，他们把“单体应用”定义为把整个应用程序开发成一个独立的单元。微服务的支持者普遍认为大多数的单体应用最后都会变成大泥球，但是我不知道会不会有人对构建一个结构化的单体应用是不可能的有异议。</p>
</li>
<li><p>根据<a href="http://martinfowler.com/articles/microservices.html#ComponentizationViaServices" target="_blank" rel="external">微服务的定义</a>微服务可以独立的部署。那也就是说一部分服务必须有自己的部署顺序是反微服务架构的。</p>
</li>
</ol>
<h5 id="延伸阅读">延伸阅读</h5><p>Sam Newman在他的书<a href="http://www.amazon.cn/Building-Microservices-Newman-Sam/dp/1491950358/ref=sr_1_fkmr1_1?ie=UTF8&amp;qid=1436514928&amp;sr=8-1-fkmr1&amp;keywords=build+a+microservice" target="_blank" rel="external">构建微服务</a>第一章里面介绍了更多微服务的优点。</p>
<p>Benjamin Wootton的博客，<a href="http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html" target="_blank" rel="external">微服务-不是免费的午餐</a>最早也是最好的总结了使用微服务的缺点。</p>
<h5 id="鸣谢">鸣谢</h5><p>Brian Mason, Chris Ford, Rebecca Parsons, Rob Miles, Scott Robinson, Stefan Tilkov, Steven Lowe, and Unmesh Joshi参与讨论和修改。</p>
<hr>
<p>翻译自<a href="http://martinfowler.com/articles/microservice-trade-offs.html" target="_blank" rel="external">Microservice Trade-Offs</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/microservice.png" alt="微服务架构"></p>
<p>现在许多开发团队已经意识到<a href="http://martinfowler.com/articles/microservices.html">微服务架构模式</a>会是解决大型单体应用架构所带来的问题的首选解决方案，但是某些团队也反应微服务架构会在某种程度上降低整个开发团队的开发效率。与任何其他架构模式一样，微服务架构也有其利弊之处，结合你特定的应用场景理解这些利弊之处能帮助你做出更明智的选择。</p>
<h4 id="微服务提供的好处…">微服务提供的好处…</h4><ul>
<li><a href="./#高度的模块边界化">高度的模块边界化</a>：微服务促进系统模块化，对大型团队尤其重要。</li>
<li><a href="./#独立部署">独立部署</a>：简单的服务部署更为容易因为它的依赖更少，并且服务是相对独立自主的，而且当某个服务出错时不太可能引起整个应用程序系统崩溃。</li>
<li><a href="./#技术多样性">技术多样性</a>：使用微服务你可以混用多种开发语言，开发框架和数据存储技术。</li>
</ul>
<h4 id="微服务引入的成本…">微服务引入的成本…</h4><ul>
<li><a href="./#分布式">分布式</a>：分布式系统开发难度大，因为远程调用速度慢且出错风险极高。</li>
<li><a href="./#最终一致性">最终一致性</a>：在分布式系统中管理强一致性问题更加困难，这意味着每个服务都必须关注系统的最终一致性问题。</li>
<li><a href="./#运维复杂性">运维复杂性</a>：你需要一个较为成熟的维护团队来管理诸多的微服务，处理日常的微服务更新及频繁部署等问题。</li>
</ul>]]>
    
    </summary>
    
      <category term="Martin Fowler" scheme="http://wenhao.github.io/tags/Martin-Fowler/"/>
    
      <category term="微服务" scheme="http://wenhao.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="翻译" scheme="http://wenhao.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[互联网+]]></title>
    <link href="http://wenhao.github.io/2015/06/09/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    <id>http://wenhao.github.io/2015/06/09/互联网/</id>
    <published>2015-06-09T01:13:41.000Z</published>
    <updated>2015-07-06T04:29:53.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/img/互联网+.jpg" alt="互联网+"></p>
<p>&emsp;&emsp;眼下，互联网+持续升温，发展迅猛，加之政府大力扶持，中国经济开始进入技术、模式和产业大变革时期。在“站在这个风口上，猪都能飞起来了”的大背景之下，涌现出了一大批勇于创业积极创新的先进集体和个人。</p>
<h3 id="宏观政策">宏观政策</h3><p>&emsp;&emsp;当下，经济下行压力巨大，消费、投资和出口已不再是保持中国经济增长可靠的引擎。中国迫切的需要一个新的政策来拉动经济，促进消费及解决日益严峻的就业压力；加之地产行业的持续低迷，资产加速逃离，大量闲置资金急迫需要寻找下一个可靠的“资金池”以缓解经济运行压力。 “大众创业、万众创新”作为经济增长的双引擎之首写入政府工作报告， 以一种”抛开杂念，放手一搏“的精神激励着广大人民勇于创业积极创新的势头，可见政府抓重点调整产业结构的决心。互联网+恰好在各行各业起到了催化剂的作用，必将加速重塑传统行业的进程。</p>
<a id="more"></a>
<h3 id="趋势">趋势</h3><ul>
<li>连接需求方和供给方，去中心化。带来的是提高效率并充分利用资源，减少中间的分销流程，提供更为个性化的服务。例子：Uber、途家等。</li>
<li>传统行业互联网化，众多的细分行业都可以通过互联网获得发展机会。例如：B2C、C2C等。</li>
<li>对接互联网金融，一切的产业都需要金融的支持。例如：支付宝、陆金所P2P等。</li>
<li>智能时代，各种智能设备必将掀起新一轮的产业革命。例如：智能电视、智能家居、智能汽车、医疗健康、智能玩具、机器人等领域。</li>
</ul>
<h3 id="实践">实践</h3><h5 id="互联网+政府服务：">互联网+政府服务：</h5><p>&emsp;&emsp;资源整合，从基础设施服务(驾照违法查询、车辆年检预约、结婚登记预约、全程路况、水、电、煤气等)入手，对接政府各机构数据，打造一体化的城市服务平台。在不久的将来，也许不会再有类似“抄电表”之类的“土豪”工作，但是同样也会间接地衍生出很多需要特定专业技能的就业机会。</p>
<h5 id="互联网+传统农业：">互联网+传统农业：</h5><p>&emsp;&emsp;提高农村土地使用率，促进现代化农业进程，减少中间环节，细分市场，精准营销。例如：天天果园。</p>
<h5 id="互联网+教育：">互联网+教育：</h5><p>&emsp;&emsp;在线教育已不是什么新鲜的名词，而针对教育产业的“细分市场”提供更为”个性化“的授课体验也许会成为另一个朝阳产业。例如作业帮和学霸君等。</p>
<h5 id="互联网+医疗：">互联网+医疗：</h5><p>&emsp;&emsp;以往由于信息不对称导致药品价格虚高的现象将不复存在，药品电商会逐步取代传统的药品销售模式。各种可穿戴设备可以进一步提升医疗效率，避免医疗资源浪费。也许”医药代表“这一类”高大上“职业会慢慢退出历史的舞台。</p>
<p>更多……</p>
<h3 id="事件">事件</h3><ul>
<li>2014年8月29日，经国务院同意，发改委、工信部、科技部、公安部、财政部、国土部、住建部、交通部等八部委印发《关于促进智慧城市健康发展的指导意见》，要求各地区、各有关部门落实本指导意见提出的各项任务，确保智慧城市建设健康有序推进。</li>
<li>2014年9月10日，李克强提出，要在960万平方公里土地上掀起“大众创业”“草根创业”的新浪潮，形成“万众创新”“人人创新”的新态势。</li>
<li>2015年3月5日，在十二届全国人大三次会议上，李克强总理在政府工作报告中首次提出“互联网＋”行动计划。</li>
<li>2015年4月22日，蚂蚁金融服务集团、阿里巴巴集团与新浪微博，共同启动“互联网+城市服务”战略，联合为各地政府提供“智慧城市”的一站式解决方案。</li>
<li>2015年5月18日，暴风科技完成了第36个涨停，股价收报于248.6元，总市值达到298.32亿元，这接近迅雷市值（7.29亿美元）的6倍和优酷土豆38亿美元的市值。</li>
<li>2015年5月25日，四川省人民政府与腾讯公司在成都签署战略合作协议，就“互联网+”达成全面深层合作。</li>
</ul>
<h3 id="最后">最后</h3><p>&emsp;&emsp;以”互联网+痛点“为出发点可以衍生出很多新的创业创新的机会。产业和模式的创新需要依托技术的创新及支持，作为具备“创新”基因的TWers若能给站在“风口”上的创业者们提供专业的软件服务何尝不是另一种新的“互联网+软件服务”的革命呢?</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/img/互联网+.jpg" alt="互联网+"></p>
<p>&emsp;&emsp;眼下，互联网+持续升温，发展迅猛，加之政府大力扶持，中国经济开始进入技术、模式和产业大变革时期。在“站在这个风口上，猪都能飞起来了”的大背景之下，涌现出了一大批勇于创业积极创新的先进集体和个人。</p>
<h3 id="宏观政策">宏观政策</h3><p>&emsp;&emsp;当下，经济下行压力巨大，消费、投资和出口已不再是保持中国经济增长可靠的引擎。中国迫切的需要一个新的政策来拉动经济，促进消费及解决日益严峻的就业压力；加之地产行业的持续低迷，资产加速逃离，大量闲置资金急迫需要寻找下一个可靠的“资金池”以缓解经济运行压力。 “大众创业、万众创新”作为经济增长的双引擎之首写入政府工作报告， 以一种”抛开杂念，放手一搏“的精神激励着广大人民勇于创业积极创新的势头，可见政府抓重点调整产业结构的决心。互联网+恰好在各行各业起到了催化剂的作用，必将加速重塑传统行业的进程。</p>]]>
    
    </summary>
    
      <category term="互联网+" scheme="http://wenhao.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="互联网+" scheme="http://wenhao.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
</feed>